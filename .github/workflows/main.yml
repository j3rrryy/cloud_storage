name: Lint, Test, Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Run Ruff linting
        uses: astral-sh/ruff-action@v1.1.1
        with:
          args: "check --fix --exclude **/proto"

      - name: Run Ruff formatting
        uses: astral-sh/ruff-action@v1.1.1
        with:
          args: "format --exclude **/proto"

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5.0.1
        with:
          commit_message: "ruff: fix and apply formatting"

  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: [gateway, auth, files, mail]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository }}:${{ matrix.service }}-latest -f ./src/${{ matrix.service }}/Dockerfile ./src/${{ matrix.service }}

      - name: Run ${{ matrix.service }} tests
        run: |
          docker compose -f ./docker-compose.test.yml up ${{ matrix.service }}
          docker cp ${{ matrix.service }}_test:./app/coverage.xml ./coverage_${{ matrix.service }}.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.0.7
        with:
          fail_ci_if_error: true
          files: ./coverage_${{ matrix.service }}.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}
          verbose: true

      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository }}:${{ matrix.service }}-latest

  deploy:
    if: ${{ vars.DEPLOY == 'true' }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy the app
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          script: |
            echo "${{ secrets.PASSWORD }}" | sudo -S sh -c "
            cd cloud_storage &&
            docker compose -f docker-compose.prod.yml up gateway auth files mail --force-recreate -d &&
            docker image prune -f
            "
