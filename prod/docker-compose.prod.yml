volumes:
  auth_postgres_data:
  auth_redis_data:
  file_postgres_data:
  file_redis_data:
  minio_data:
  zookeper_data:
  zookeper_log:
  zookeper_secrets:
  kafka_data:
  kafka_config:
  kafka_secrets:
  loki_data:
  prometheus_data:
  grafana_data:
  certbot_conf:
  certbot_www:

networks:
  nginx_network:
  main_network:
  auth_network:
  file_network:
  mail_network:
  grafana_network:


services:
  nginx:
    image: nginx:stable-alpine
    restart: always
    working_dir: /app
    ports:
      - 80:80
      - 443:443
    volumes:
      - certbot_conf:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - nginx_network
    depends_on:
      - gateway
    container_name: nginx_prod

  gateway:
    image: ghcr.io/j3rrryy/cloud_storage:gateway-latest
    pull_policy: always
    restart: always
    expose:
      - 8000
    env_file:
      - ./.env
    networks:
      - nginx_network
      - main_network
    depends_on:
      - auth
      - file
      - mail
    command: uv run python ./main.py
    container_name: gateway_prod

  auth:
    image: ghcr.io/j3rrryy/cloud_storage:auth-latest
    pull_policy: always
    restart: always
    expose:
      - 50051
      - 8000
    env_file:
      - ./.env
    networks:
      - main_network
      - auth_network
    depends_on:
      - auth_postgres
      - auth_redis
    command: bash -c "
      uv run alembic -c './config/alembic.ini' upgrade head &&
      uv run python ./main.py"
    container_name: auth_prod

  auth_postgres:
    image: postgres:alpine
    restart: always
    env_file:
      - ./.env
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data/
    networks:
      - auth_network
    hostname: postgres
    container_name: auth_postgres_prod

  auth_redis:
    image: redis:alpine
    restart: always
    volumes:
      - auth_redis_data:/data/
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - auth_network
    hostname: redis
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    container_name: auth_redis_prod

  file:
    image: ghcr.io/j3rrryy/cloud_storage:file-latest
    pull_policy: always
    restart: always
    expose:
      - 50051
      - 8000
    env_file:
      - ./.env
    networks:
      - main_network
      - file_network
    depends_on:
      - minio
      - file_postgres
      - file_redis
    command: bash -c "
      uv run alembic -c './config/alembic.ini' upgrade head &&
      uv run python ./main.py"
    container_name: file_prod

  minio:
    image: minio/minio:latest
    restart: always
    env_file:
      - ./.env
    environment:
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - minio_data:/data
    networks:
      - nginx_network
      - file_network
      - grafana_network
    command: server /data
    container_name: minio_prod

  mc:
    image: minio/mc:latest
    env_file:
      - ./.env
    volumes:
      - ./create_buckets.sh:/create_buckets.sh
    networks:
      - file_network
    depends_on:
      - minio
    entrypoint: bash ./create_buckets.sh
    container_name: mc_prod

  file_postgres:
    image: postgres:alpine
    restart: always
    env_file:
      - ./.env
    volumes:
      - file_postgres_data:/var/lib/postgresql/data/
    networks:
      - file_network
    hostname: postgres
    container_name: file_postgres_prod

  file_redis:
    image: redis:alpine
    restart: always
    volumes:
      - file_redis_data:/data/
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - file_network
    hostname: redis
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    container_name: file_redis_prod

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    expose:
      - 2181
    env_file:
      - ./.env
    volumes:
      - zookeper_data:/var/lib/zookeeper/data
      - zookeper_log:/var/lib/zookeeper/log
      - zookeper_secrets:/etc/zookeeper/secrets
    networks:
      - mail_network
    container_name: zookeper_prod

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    expose:
      - 9092
    env_file:
      - ./.env
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_config:/mnt/shared/config
      - kafka_secrets:/etc/kafka/secrets
    networks:
      - main_network
      - mail_network
    depends_on:
      - zookeeper
    container_name: kafka_prod

  mail:
    image: ghcr.io/j3rrryy/cloud_storage:mail-latest
    pull_policy: always
    restart: always
    expose:
      - 8000
    env_file:
      - ./.env
    networks:
      - main_network
      - mail_network
    depends_on:
      - kafka
    command: uv run python ./main.py
    container_name: mail_prod

  loki:
    image: grafana/loki:latest
    restart: always
    expose:
      - 3100
    env_file:
      - ./.env
    volumes:
      - loki_data:/loki
      - ./loki.yml:/etc/loki/loki.yml:ro
    networks:
      - grafana_network
    command: --config.file=/etc/loki/loki.yml --config.expand-env=true
    container_name: loki_prod

  promtail:
    image: grafana/promtail:latest
    restart: always
    volumes:
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail.yml:/etc/promtail/docker-config.yml:ro
    networks:
      - grafana_network
    depends_on:
      - loki
    command: --config.file=/etc/promtail/docker-config.yml
    container_name: promtail_prod

  prometheus:
    image: prom/prometheus:latest
    restart: always
    expose:
      - 9090
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - grafana_network
    command: --config.file=/etc/prometheus/prometheus.yml
    container_name: prometheus_prod

  grafana:
    image: grafana/grafana:latest
    restart: always
    expose:
      - 3000
    env_file:
      - ./.env
    environment:
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - nginx_network
      - main_network
      - grafana_network
    depends_on:
      - loki
      - promtail
      - prometheus
    container_name: grafana_prod
