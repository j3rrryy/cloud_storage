# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import auth_pb2 as auth__pb2

GRPC_GENERATED_VERSION = "1.66.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in auth_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
            "/auth.Auth/Register",
            request_serializer=auth__pb2.RegisterRequest.SerializeToString,
            response_deserializer=auth__pb2.VerificationMail.FromString,
            _registered_method=True,
        )
        self.VerifyEmail = channel.unary_unary(
            "/auth.Auth/VerifyEmail",
            request_serializer=auth__pb2.VerificationToken.SerializeToString,
            response_deserializer=auth__pb2.Empty.FromString,
            _registered_method=True,
        )
        self.LogIn = channel.unary_unary(
            "/auth.Auth/LogIn",
            request_serializer=auth__pb2.LogInRequest.SerializeToString,
            response_deserializer=auth__pb2.LogInResponse.FromString,
            _registered_method=True,
        )
        self.LogOut = channel.unary_unary(
            "/auth.Auth/LogOut",
            request_serializer=auth__pb2.AccessToken.SerializeToString,
            response_deserializer=auth__pb2.Empty.FromString,
            _registered_method=True,
        )
        self.ResendVerificationMail = channel.unary_unary(
            "/auth.Auth/ResendVerificationMail",
            request_serializer=auth__pb2.AccessToken.SerializeToString,
            response_deserializer=auth__pb2.VerificationMail.FromString,
            _registered_method=True,
        )
        self.Auth = channel.unary_unary(
            "/auth.Auth/Auth",
            request_serializer=auth__pb2.AccessToken.SerializeToString,
            response_deserializer=auth__pb2.AuthResponse.FromString,
            _registered_method=True,
        )
        self.Refresh = channel.unary_unary(
            "/auth.Auth/Refresh",
            request_serializer=auth__pb2.RefreshRequest.SerializeToString,
            response_deserializer=auth__pb2.Tokens.FromString,
            _registered_method=True,
        )
        self.SessionList = channel.unary_unary(
            "/auth.Auth/SessionList",
            request_serializer=auth__pb2.AccessToken.SerializeToString,
            response_deserializer=auth__pb2.Sessions.FromString,
            _registered_method=True,
        )
        self.RevokeSession = channel.unary_unary(
            "/auth.Auth/RevokeSession",
            request_serializer=auth__pb2.RevokeSessionRequest.SerializeToString,
            response_deserializer=auth__pb2.Empty.FromString,
            _registered_method=True,
        )
        self.Profile = channel.unary_unary(
            "/auth.Auth/Profile",
            request_serializer=auth__pb2.AccessToken.SerializeToString,
            response_deserializer=auth__pb2.ProfileResponse.FromString,
            _registered_method=True,
        )
        self.UpdateEmail = channel.unary_unary(
            "/auth.Auth/UpdateEmail",
            request_serializer=auth__pb2.UpdateEmailRequest.SerializeToString,
            response_deserializer=auth__pb2.VerificationMail.FromString,
            _registered_method=True,
        )
        self.UpdatePassword = channel.unary_unary(
            "/auth.Auth/UpdatePassword",
            request_serializer=auth__pb2.UpdatePasswordRequest.SerializeToString,
            response_deserializer=auth__pb2.Empty.FromString,
            _registered_method=True,
        )
        self.DeleteProfile = channel.unary_unary(
            "/auth.Auth/DeleteProfile",
            request_serializer=auth__pb2.AccessToken.SerializeToString,
            response_deserializer=auth__pb2.UserId.FromString,
            _registered_method=True,
        )


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def VerifyEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LogIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LogOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResendVerificationMail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Auth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Refresh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SessionList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RevokeSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Profile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdatePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Register": grpc.unary_unary_rpc_method_handler(
            servicer.Register,
            request_deserializer=auth__pb2.RegisterRequest.FromString,
            response_serializer=auth__pb2.VerificationMail.SerializeToString,
        ),
        "VerifyEmail": grpc.unary_unary_rpc_method_handler(
            servicer.VerifyEmail,
            request_deserializer=auth__pb2.VerificationToken.FromString,
            response_serializer=auth__pb2.Empty.SerializeToString,
        ),
        "LogIn": grpc.unary_unary_rpc_method_handler(
            servicer.LogIn,
            request_deserializer=auth__pb2.LogInRequest.FromString,
            response_serializer=auth__pb2.LogInResponse.SerializeToString,
        ),
        "LogOut": grpc.unary_unary_rpc_method_handler(
            servicer.LogOut,
            request_deserializer=auth__pb2.AccessToken.FromString,
            response_serializer=auth__pb2.Empty.SerializeToString,
        ),
        "ResendVerificationMail": grpc.unary_unary_rpc_method_handler(
            servicer.ResendVerificationMail,
            request_deserializer=auth__pb2.AccessToken.FromString,
            response_serializer=auth__pb2.VerificationMail.SerializeToString,
        ),
        "Auth": grpc.unary_unary_rpc_method_handler(
            servicer.Auth,
            request_deserializer=auth__pb2.AccessToken.FromString,
            response_serializer=auth__pb2.AuthResponse.SerializeToString,
        ),
        "Refresh": grpc.unary_unary_rpc_method_handler(
            servicer.Refresh,
            request_deserializer=auth__pb2.RefreshRequest.FromString,
            response_serializer=auth__pb2.Tokens.SerializeToString,
        ),
        "SessionList": grpc.unary_unary_rpc_method_handler(
            servicer.SessionList,
            request_deserializer=auth__pb2.AccessToken.FromString,
            response_serializer=auth__pb2.Sessions.SerializeToString,
        ),
        "RevokeSession": grpc.unary_unary_rpc_method_handler(
            servicer.RevokeSession,
            request_deserializer=auth__pb2.RevokeSessionRequest.FromString,
            response_serializer=auth__pb2.Empty.SerializeToString,
        ),
        "Profile": grpc.unary_unary_rpc_method_handler(
            servicer.Profile,
            request_deserializer=auth__pb2.AccessToken.FromString,
            response_serializer=auth__pb2.ProfileResponse.SerializeToString,
        ),
        "UpdateEmail": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateEmail,
            request_deserializer=auth__pb2.UpdateEmailRequest.FromString,
            response_serializer=auth__pb2.VerificationMail.SerializeToString,
        ),
        "UpdatePassword": grpc.unary_unary_rpc_method_handler(
            servicer.UpdatePassword,
            request_deserializer=auth__pb2.UpdatePasswordRequest.FromString,
            response_serializer=auth__pb2.Empty.SerializeToString,
        ),
        "DeleteProfile": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteProfile,
            request_deserializer=auth__pb2.AccessToken.FromString,
            response_serializer=auth__pb2.UserId.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "auth.Auth", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("auth.Auth", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/Register",
            auth__pb2.RegisterRequest.SerializeToString,
            auth__pb2.VerificationMail.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def VerifyEmail(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/VerifyEmail",
            auth__pb2.VerificationToken.SerializeToString,
            auth__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def LogIn(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/LogIn",
            auth__pb2.LogInRequest.SerializeToString,
            auth__pb2.LogInResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def LogOut(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/LogOut",
            auth__pb2.AccessToken.SerializeToString,
            auth__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ResendVerificationMail(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/ResendVerificationMail",
            auth__pb2.AccessToken.SerializeToString,
            auth__pb2.VerificationMail.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Auth(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/Auth",
            auth__pb2.AccessToken.SerializeToString,
            auth__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Refresh(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/Refresh",
            auth__pb2.RefreshRequest.SerializeToString,
            auth__pb2.Tokens.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SessionList(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/SessionList",
            auth__pb2.AccessToken.SerializeToString,
            auth__pb2.Sessions.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RevokeSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/RevokeSession",
            auth__pb2.RevokeSessionRequest.SerializeToString,
            auth__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Profile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/Profile",
            auth__pb2.AccessToken.SerializeToString,
            auth__pb2.ProfileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateEmail(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/UpdateEmail",
            auth__pb2.UpdateEmailRequest.SerializeToString,
            auth__pb2.VerificationMail.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdatePassword(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/UpdatePassword",
            auth__pb2.UpdatePasswordRequest.SerializeToString,
            auth__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteProfile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.Auth/DeleteProfile",
            auth__pb2.AccessToken.SerializeToString,
            auth__pb2.UserId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
