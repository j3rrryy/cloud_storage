volumes:
  auth_postgres_data:
  auth_redis_data:
  file_postgres_data:
  file_redis_data:
  minio_data:
  kafka_data:
  kafka_secrets:
  loki_data:
  prometheus_data:
  grafana_data:

networks:
  nginx_network:
  main_network:
  auth_network:
  file_network:
  mail_network:
  grafana_network:


services:
  nginx-api:
    image: nginx:1.28.0-alpine
    profiles: ["api"]
    restart: unless-stopped
    working_dir: /app
    ports:
      - 80:80
    volumes:
      - ./dev/nginx.api.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - nginx_network
    depends_on:
      - gateway
    container_name: nginx_api_dev

  nginx-all:
    image: nginx:1.28.0-alpine
    profiles: ["all"]
    restart: unless-stopped
    working_dir: /app
    ports:
      - 80:80
    volumes:
      - ./dev/nginx.all.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - nginx_network
    depends_on:
      - gateway
    container_name: nginx_all_dev

  gateway:
    build:
      context: ./src/gateway/
    profiles: ["api", "all"]
    restart: unless-stopped
    expose:
      - 8000
    env_file:
      - ./dev/.env
    volumes:
      - ./src/gateway/:/src/gateway/
    networks:
      - nginx_network
      - main_network
    depends_on:
      - auth
      - file
      - mail
    command: uv run python ./main.py
    container_name: gateway_dev

  auth:
    build:
      context: ./src/auth/
    profiles: ["api", "all"]
    restart: unless-stopped
    expose:
      - 50051
      - 8000
    env_file:
      - ./dev/.env
    volumes:
      - ./src/auth/:/src/auth/
    networks:
      - main_network
      - auth_network
    depends_on:
      - auth_postgres
      - auth_redis
    command: bash -c "
      uv run alembic upgrade head &&
      uv run python ./main.py"
    container_name: auth_dev

  auth_postgres:
    image: postgres:17.5-alpine
    profiles: ["api", "all"]
    restart: unless-stopped
    env_file:
      - ./dev/.env
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data/
    networks:
      - auth_network
    hostname: postgres
    container_name: auth_postgres_dev

  auth_redis:
    image: redis:8.2-alpine
    profiles: ["api", "all"]
    restart: unless-stopped
    volumes:
      - auth_redis_data:/data/
      - ./dev/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - auth_network
    hostname: redis
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    container_name: auth_redis_dev

  file:
    build:
      context: ./src/file/
    profiles: ["api", "all"]
    restart: unless-stopped
    expose:
      - 50051
      - 8000
    env_file:
      - ./dev/.env
    volumes:
      - ./src/file/:/src/file/
    networks:
      - main_network
      - file_network
    depends_on:
      - minio
      - file_postgres
      - file_redis
    command: bash -c "
      uv run alembic upgrade head &&
      uv run python ./main.py"
    container_name: file_dev

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    profiles: ["api", "all"]
    restart: unless-stopped
    expose:
      - 9000
    env_file:
      - ./dev/.env
    environment:
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - minio_data:/data
    networks:
      - nginx_network
      - file_network
      - grafana_network
    command: server /data
    container_name: minio_dev

  mc:
    image: minio/mc:RELEASE.2025-07-21T05-28-08Z
    profiles: ["api", "all"]
    env_file:
      - ./dev/.env
    volumes:
      - ./dev/create_buckets.sh:/create_buckets.sh
    networks:
      - file_network
    depends_on:
      - minio
    entrypoint: bash ./create_buckets.sh
    container_name: mc_dev

  file_postgres:
    image: postgres:17.5-alpine
    profiles: ["api", "all"]
    restart: unless-stopped
    env_file:
      - ./dev/.env
    volumes:
      - file_postgres_data:/var/lib/postgresql/data/
    networks:
      - file_network
    hostname: postgres
    container_name: file_postgres_dev

  file_redis:
    image: redis:8.2-alpine
    profiles: ["api", "all"]
    restart: unless-stopped
    volumes:
      - file_redis_data:/data/
      - ./dev/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - file_network
    hostname: redis
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    container_name: file_redis_dev

  kafka:
    image: confluentinc/cp-kafka:8.0.0
    profiles: ["api", "all"]
    restart: unless-stopped
    expose:
      - 9092
      - 9093
    environment:
      CLUSTER_ID: c2d43dcfdc15aba0c833dbfc46afe9cb
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_secrets:/etc/kafka/secrets
    networks:
      - main_network
      - mail_network
    container_name: kafka_dev

  mail:
    build:
      context: ./src/mail/
    profiles: ["api", "all"]
    restart: unless-stopped
    expose:
      - 8000
    env_file:
      - ./dev/.env
    volumes:
      - ./src/mail/:/src/mail/
    networks:
      - main_network
      - mail_network
    depends_on:
      - kafka
    command: uv run python ./main.py
    container_name: mail_dev

  loki:
    image: grafana/loki:3.5
    profiles: ["all"]
    restart: unless-stopped
    expose:
      - 3100
    volumes:
      - loki_data:/loki
      - ./dev/loki.yml:/etc/loki/loki.yml:ro
    networks:
      - grafana_network
    command: --config.file=/etc/loki/loki.yml --config.expand-env=true
    container_name: loki_dev

  promtail:
    image: grafana/promtail:3.5
    profiles: ["all"]
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./dev/promtail.yml:/etc/promtail/docker-config.yml:ro
    networks:
      - grafana_network
    depends_on:
      - loki
    command: --config.file=/etc/promtail/docker-config.yml
    container_name: promtail_dev

  prometheus:
    image: prom/prometheus:v3.5.0
    profiles: ["all"]
    restart: unless-stopped
    expose:
      - 9090
    volumes:
      - prometheus_data:/prometheus
      - ./dev/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - grafana_network
    command: --config.file=/etc/prometheus/prometheus.yml
    container_name: prometheus_dev

  grafana:
    image: grafana/grafana:12.1.1
    profiles: ["all"]
    restart: unless-stopped
    expose:
      - 3000
    env_file:
      - ./dev/.env
    environment:
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - nginx_network
      - main_network
      - grafana_network
    depends_on:
      - loki
      - promtail
      - prometheus
    container_name: grafana_dev
